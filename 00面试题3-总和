python面试题目

1、python是面向过程的，还是面向对象的？
	答：Python既是支持面向过程的，又是支持面向对象的。
		为何？
			将函数和变量封装在了一个类中。

2、Python面向对象的三个要素是什么？
	不论是什么语言：面向对象的三个要素是：  封装、 继承、 多态。
		封装：把函数和全局变量用一个容器封装在一起，就是对象。
		继承：子类继承了父类的功能。
		多态：定义的时候不知道/不确定调用哪些功能，再调用的时候根据需要确定子类还是父类。

3、Python语言是动态语言。在定义的时候不知道具体情况。在使用调用中再真正动态定义。多态效果。


4、完成连个变量的交换

	a = 4
	b = 5
	#  第一种做法：引入第三变量：升维
	c = a
	a = b
	b = c

	#  第二种做法：要求没有引入第三个变量。
	a=a+b
	b=a-b
	a=a-b
	#  这种写法在任何语言中都实用。

	#  第三种做法：
	a, b = b, a
	#  Python所独自拥有的。



5、在循环过程中，删除一个元素是有坑的。
	ipython中测试：
	a =[11,22,33,44,55,66,77]
	for i in a:
		print(i)
		if i ==3:
			a.remove(i)
	a
	循环中删除元素，容易出现漏删问题：
	因为列表中，删除一个元素后，原来元素占据的位置留下一个空白，此时后面的数据过来补坑，
	但是循环指针已经指向这个位置，而这个位置此时填充的是后面的数据，下一次循环指针再次移动，导致数据遗漏。
	a =[11,22,33,44,55,66,77]
	for i in a:
		if i == 33 or i == 44:
			a.remove(i)
	a
	此时只有33被删。
	然而在我们程序中没有出现这个问题的原因在于：我们用一个列表保存这些子弹，我们对这个列表每0.01s重复刷新循环一次，第一次遗漏，第二次刷新就会补上。所以看起来，没有问题。
	我们的这个程序不断循环，而不是只循环一次。如果只调用一次，会出现这个问题。
	如何避免这种情况：
	1、再循环一次。
	2、不要再循环中删自己的元素，而是在循环中记录下来，删除记录的元素。：
		a =[11,22,33,44,55,66,77]
		b = []
		for i in a:
			if i == 33 or i == 44:
				b.append(i)
		b
		for i in b:
			a.remove(i)
	防止在循环中删除元素出现bug的处理方式。

