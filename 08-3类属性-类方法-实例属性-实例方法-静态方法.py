# 继承。代码复用，少写。
# 父类、基类；子类、派生类。


class Tool(object):

    # 属性：类属性。
    num = 0

    # 方法：其实在定义方法后，新建实例之后，会在实例对象中产生一个特殊的属性变量记录（指向/引用）这个方法的位置。
    def __init__(self, new_name):
        # 实例属性name。
        self.name = new_name
        # 对类属性+=1
        Tool.num += 1    # 此句才是重点！！！！！！






tool1 = Tool("铁锹")

tool2 = Tool("工兵铲")

tool3 = Tool("水桶")







# 总结1：类在程序里面也是一个对象：通过类模板建立出来的对象，为了区分：叫实例对象。
# 为了区分属性，实例叫实例属性。类的属性，叫类属性。
    # 实例属性：和具体的某个实例对象有关系。并且一个实例对象和另外一个实例对象是不同享属性的。和对象有关系的叫实例属性。
# 类属性所属于类对象，并且类属性可以在对象之间共享。

# 类相当于在内存中创建出一个模板。以后搭建创建实例对象的时候，都以此为模板。
# 而且，不用再定义一些重复的方法。类模板中都有了。为此，类模板的属性实现全局共享，类模板的方法，各实例对象各自建立
# 一个特殊的属性变量指向类模板方法引用即可。


# 总结2：实例方法、类方法、静态方法

class Game(object):

    #类属性
    num = 0

    # 实例方法：
    def __init__(self):
        # 实例属性
        self.name = "laowang"

    # 类方法：
    @classmethod
    def add_num(cls):
        cls.num = 100

game = Game()
# 调用类方法：直接用类名。也可以用这个类创建出来的实例对象调用这个类方法。
Game.add_num()
game.add_num()
# 打印类属性
print(Game.num)



# 需要类方法直接对类属性操作。不要向上面15行一样写。
# 只要是定义方法的时候：在类方法前：加上@class类名，就是类方法，而不是实例方法。（之前不加@都是对象方法。）
# 而且之前在实例方法中，（）中写self。现在写cls
# self作用之前是为了保存对象用的，引用的。现在的cls是。默认约定俗成。

# 实例属性是跟着实例走的。实例方法就是为了修改实例属性而存在的。
# 类属性和类方法一样。只是定义的时候要加一个类的装饰器(对原有的功能再增加新功能)。@classmethod

# 在以后开发中，要用类统统用类，用函数统统用函数。既有又有，总感觉不伦不类。

# 在上面的类定义中，增加下面代码
    # 静态方法：
    @staticmethod  # 此句最重要！！！！！！！
    def print_menu():
        print("------------------")
        print("穿越火线 V11.1")
        print("1.开始游戏")
        print("2.结束游戏")
        print("------------------")


# 类方法和静态方法的区别：
    # 类方法必须要有一个参数，而静态方法可以没有参数。

    # 如何调用静态方法：
Game.print_menu() # 通过类去调用静态方法。
game.print_menu()# 通过实例对象去调用静态方法。

# 静态方法的作用：

    """拓展：修改类属性，通过需要定义的类方法。
            修改实例属性，需要通过实例方法。
            如果既与类属性无关又与实例属性无关，就定义静态方法。这就是为啥一开始就说，要用类，就全用类。
    """
